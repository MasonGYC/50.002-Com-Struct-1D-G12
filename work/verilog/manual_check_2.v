/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module manual_check_2 (
    input clk,
    input rst,
    input [15:0] io_dip,
    input io_button,
    output reg [15:0] out,
    output reg z,
    output reg v,
    output reg n,
    output reg ex
  );
  
  
  
  reg [15:0] M_register_a_d, M_register_a_q = 1'h0;
  
  reg [15:0] M_register_b_d, M_register_b_q = 1'h0;
  
  reg [5:0] M_register_alu_d, M_register_alu_q = 1'h0;
  
  reg [2:0] M_register_zvn_d, M_register_zvn_q = 1'h0;
  
  reg [0:0] M_register_ex_d, M_register_ex_q = 1'h0;
  
  reg [15:0] M_store_d, M_store_q = 1'h0;
  
  wire [16-1:0] M_test_alu_out;
  wire [1-1:0] M_test_alu_z;
  wire [1-1:0] M_test_alu_v;
  wire [1-1:0] M_test_alu_n;
  wire [1-1:0] M_test_alu_ex;
  reg [6-1:0] M_test_alu_alufn;
  reg [16-1:0] M_test_alu_a;
  reg [16-1:0] M_test_alu_b;
  alu_7 test_alu (
    .alufn(M_test_alu_alufn),
    .a(M_test_alu_a),
    .b(M_test_alu_b),
    .out(M_test_alu_out),
    .z(M_test_alu_z),
    .v(M_test_alu_v),
    .n(M_test_alu_n),
    .ex(M_test_alu_ex)
  );
  
  
  localparam S0_alu_checker = 2'd0;
  localparam S1_alu_checker = 2'd1;
  localparam S2_alu_checker = 2'd2;
  localparam S3_alu_checker = 2'd3;
  
  reg [1:0] M_alu_checker_d, M_alu_checker_q = S0_alu_checker;
  
  always @* begin
    M_alu_checker_d = M_alu_checker_q;
    M_register_alu_d = M_register_alu_q;
    M_register_ex_d = M_register_ex_q;
    M_store_d = M_store_q;
    M_register_zvn_d = M_register_zvn_q;
    M_register_b_d = M_register_b_q;
    M_register_a_d = M_register_a_q;
    
    out = M_store_q;
    z = M_register_zvn_q[0+0-:1];
    v = M_register_zvn_q[1+0-:1];
    n = M_register_zvn_q[2+0-:1];
    ex = M_register_ex_q;
    M_test_alu_a = M_register_a_q;
    M_test_alu_b = M_register_b_q;
    M_test_alu_alufn = M_register_alu_q;
    
    case (M_alu_checker_q)
      S0_alu_checker: begin
        M_register_ex_d = 1'h0;
        M_register_zvn_d = 3'h0;
        M_store_d = 16'hffff;
        M_register_a_d = io_dip;
        if (io_button) begin
          M_alu_checker_d = S1_alu_checker;
          M_store_d = M_register_a_q;
        end
      end
      S1_alu_checker: begin
        M_register_b_d = io_dip;
        if (io_button) begin
          M_alu_checker_d = S2_alu_checker;
          M_store_d = M_register_b_q;
        end
      end
      S2_alu_checker: begin
        M_register_alu_d = io_dip[0+5-:6];
        if (io_button) begin
          M_alu_checker_d = S3_alu_checker;
        end
      end
      S3_alu_checker: begin
        M_store_d = M_test_alu_out;
        if (M_register_alu_q == 6'h00 | M_register_alu_q == 6'h01) begin
          M_register_zvn_d[0+0-:1] = M_test_alu_z;
          M_register_zvn_d[1+0-:1] = M_test_alu_v;
          M_register_zvn_d[2+0-:1] = M_test_alu_n;
        end
        if (M_register_alu_q == 6'h03 | M_register_alu_q == 6'h04) begin
          M_register_ex_d = M_test_alu_ex;
        end
        if (io_button) begin
          M_alu_checker_d = S0_alu_checker;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_register_zvn_q <= 1'h0;
    end else begin
      M_register_zvn_q <= M_register_zvn_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_store_q <= 1'h0;
    end else begin
      M_store_q <= M_store_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_register_ex_q <= 1'h0;
    end else begin
      M_register_ex_q <= M_register_ex_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_alu_checker_q <= 1'h0;
    end else begin
      M_alu_checker_q <= M_alu_checker_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_register_alu_q <= 1'h0;
    end else begin
      M_register_alu_q <= M_register_alu_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_register_b_q <= 1'h0;
    end else begin
      M_register_b_q <= M_register_b_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_register_a_q <= 1'h0;
    end else begin
      M_register_a_q <= M_register_a_d;
    end
  end
  
endmodule
