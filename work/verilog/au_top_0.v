/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  wire [16-1:0] M_checker_out;
  wire [1-1:0] M_checker_z;
  wire [1-1:0] M_checker_v;
  wire [1-1:0] M_checker_n;
  wire [1-1:0] M_checker_ex;
  reg [16-1:0] M_checker_io_dip;
  reg [1-1:0] M_checker_io_button;
  manual_check_2 checker (
    .clk(clk),
    .rst(rst),
    .io_dip(M_checker_io_dip),
    .io_button(M_checker_io_button),
    .out(M_checker_out),
    .z(M_checker_z),
    .v(M_checker_v),
    .n(M_checker_n),
    .ex(M_checker_ex)
  );
  
  wire [2-1:0] M_auto_checker_status;
  wire [16-1:0] M_auto_checker_out_true;
  wire [16-1:0] M_auto_checker_out_calc;
  wire [16-1:0] M_auto_checker_progress;
  wire [16-1:0] M_auto_checker_index;
  reg [5-1:0] M_auto_checker_fail_case;
  reg [2-1:0] M_auto_checker_switch;
  reg [1-1:0] M_auto_checker_button;
  auto_check_3 auto_checker (
    .clk(clk),
    .rst(rst),
    .fail_case(M_auto_checker_fail_case),
    .switch(M_auto_checker_switch),
    .button(M_auto_checker_button),
    .status(M_auto_checker_status),
    .out_true(M_auto_checker_out_true),
    .out_calc(M_auto_checker_out_calc),
    .progress(M_auto_checker_progress),
    .index(M_auto_checker_index)
  );
  
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_4 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  wire [(3'h5+0)-1:0] M_buttoncond_out;
  reg [(3'h5+0)-1:0] M_buttoncond_in;
  
  genvar GEN_buttoncond0;
  generate
  for (GEN_buttoncond0=0;GEN_buttoncond0<3'h5;GEN_buttoncond0=GEN_buttoncond0+1) begin: buttoncond_gen_0
    button_conditioner_5 buttoncond (
      .clk(clk),
      .in(M_buttoncond_in[GEN_buttoncond0*(1)+(1)-1-:(1)]),
      .out(M_buttoncond_out[GEN_buttoncond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(3'h5+0)-1:0] M_buttondetector_out;
  reg [(3'h5+0)-1:0] M_buttondetector_in;
  
  genvar GEN_buttondetector0;
  generate
  for (GEN_buttondetector0=0;GEN_buttondetector0<3'h5;GEN_buttondetector0=GEN_buttondetector0+1) begin: buttondetector_gen_0
    edge_detector_6 buttondetector (
      .clk(clk),
      .in(M_buttondetector_in[GEN_buttondetector0*(1)+(1)-1-:(1)]),
      .out(M_buttondetector_out[GEN_buttondetector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_auto_checker_switch[1+0-:1] = 1'h0;
    M_auto_checker_switch[0+0-:1] = 1'h0;
    M_auto_checker_fail_case = 5'h00;
    M_auto_checker_button = 1'h0;
    M_checker_io_button = 1'h0;
    M_checker_io_dip = 16'h0000;
    M_buttoncond_in = io_button;
    M_buttondetector_in = M_buttoncond_out;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    
    case (io_dip[16+7+0-:1])
      1'h1: begin
        M_auto_checker_button = io_button[4+0-:1];
        M_auto_checker_switch[1+0-:1] = io_dip[16+7+0-:1];
        M_auto_checker_switch[0+0-:1] = io_dip[16+6+0-:1];
        M_auto_checker_fail_case = io_dip[16+0+4-:5];
        io_led[16+6+1-:2] = M_auto_checker_status;
        io_led[0+7-:8] = M_auto_checker_progress[0+7-:8];
        io_led[8+7-:8] = M_auto_checker_progress[8+7-:8];
        M_seg_values = M_auto_checker_index;
      end
      default: begin
        io_led[16+0+0-:1] = io_button[0+0-:1];
        M_checker_io_button = M_buttondetector_out[0+0-:1];
        M_seg_values = 16'h0000;
        io_seg = 8'hff;
        M_checker_io_dip[0+7-:8] = io_dip[0+7-:8];
        M_checker_io_dip[8+7-:8] = io_dip[8+7-:8];
        io_led[0+7-:8] = M_checker_out[0+7-:8];
        io_led[8+7-:8] = M_checker_out[8+7-:8];
        io_led[16+4+0-:1] = M_checker_ex;
        io_led[16+1+0-:1] = M_checker_z;
        io_led[16+2+0-:1] = M_checker_v;
        io_led[16+3+0-:1] = M_checker_n;
      end
    endcase
  end
endmodule
