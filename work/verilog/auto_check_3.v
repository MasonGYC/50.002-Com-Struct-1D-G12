/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module auto_check_3 (
    input clk,
    input rst,
    input [4:0] fail_case,
    input [1:0] switch,
    input button,
    output reg [1:0] status,
    output reg [15:0] out_true,
    output reg [15:0] out_calc,
    output reg [15:0] progress,
    output reg [15:0] index
  );
  
  
  
  wire [1-1:0] M_slowclock_value;
  counter_8 slowclock (
    .clk(clk),
    .rst(rst),
    .value(M_slowclock_value)
  );
  
  
  localparam START_fsm_t = 5'd0;
  localparam S0_fsm_t = 5'd1;
  localparam S1_fsm_t = 5'd2;
  localparam S2_fsm_t = 5'd3;
  localparam S3_fsm_t = 5'd4;
  localparam S4_fsm_t = 5'd5;
  localparam S5_fsm_t = 5'd6;
  localparam S6_fsm_t = 5'd7;
  localparam S7_fsm_t = 5'd8;
  localparam S8_fsm_t = 5'd9;
  localparam S9_fsm_t = 5'd10;
  localparam S10_fsm_t = 5'd11;
  localparam S11_fsm_t = 5'd12;
  localparam S12_fsm_t = 5'd13;
  localparam S13_fsm_t = 5'd14;
  localparam S14_fsm_t = 5'd15;
  localparam S15_fsm_t = 5'd16;
  localparam S16_fsm_t = 5'd17;
  localparam S17_fsm_t = 5'd18;
  localparam S18_fsm_t = 5'd19;
  localparam S19_fsm_t = 5'd20;
  localparam S20_fsm_t = 5'd21;
  localparam S21_fsm_t = 5'd22;
  localparam S22_fsm_t = 5'd23;
  localparam S23_fsm_t = 5'd24;
  localparam S24_fsm_t = 5'd25;
  localparam S25_fsm_t = 5'd26;
  localparam PASS_fsm_t = 5'd27;
  localparam FAIL_fsm_t = 5'd28;
  localparam B_fsm_t = 5'd29;
  localparam ALUFN_fsm_t = 5'd30;
  
  reg [4:0] M_fsm_t_d, M_fsm_t_q = START_fsm_t;
  
  wire [16-1:0] M_r_outA;
  wire [16-1:0] M_r_outB;
  wire [6-1:0] M_r_alufn;
  wire [16-1:0] M_r_correct_answer;
  wire [1-1:0] M_r_outZ;
  wire [1-1:0] M_r_outV;
  wire [1-1:0] M_r_outN;
  reg [5-1:0] M_r_address;
  rom_9 r (
    .address(M_r_address),
    .outA(M_r_outA),
    .outB(M_r_outB),
    .alufn(M_r_alufn),
    .correct_answer(M_r_correct_answer),
    .outZ(M_r_outZ),
    .outV(M_r_outV),
    .outN(M_r_outN)
  );
  
  wire [16-1:0] M_aluUnit_out;
  wire [1-1:0] M_aluUnit_z;
  wire [1-1:0] M_aluUnit_v;
  wire [1-1:0] M_aluUnit_n;
  wire [1-1:0] M_aluUnit_ex;
  reg [6-1:0] M_aluUnit_alufn;
  reg [16-1:0] M_aluUnit_a;
  reg [16-1:0] M_aluUnit_b;
  alu_7 aluUnit (
    .alufn(M_aluUnit_alufn),
    .a(M_aluUnit_a),
    .b(M_aluUnit_b),
    .out(M_aluUnit_out),
    .z(M_aluUnit_z),
    .v(M_aluUnit_v),
    .n(M_aluUnit_n),
    .ex(M_aluUnit_ex)
  );
  
  reg [15:0] M_reg_index_d, M_reg_index_q = 16'h0000;
  
  reg [4:0] M_register_address_d, M_register_address_q = 1'h0;
  
  reg [15:0] computed;
  reg [15:0] a;
  reg [15:0] b;
  reg [5:0] alufn;
  reg z;
  reg v;
  reg n;
  reg [15:0] o;
  
  always @* begin
    M_fsm_t_d = M_fsm_t_q;
    M_register_address_d = M_register_address_q;
    M_reg_index_d = M_reg_index_q;
    
    status = 2'h0;
    M_r_address = M_register_address_q;
    a = M_r_outA;
    b = M_r_outB;
    o = M_r_correct_answer;
    z = M_r_outZ;
    v = M_r_outV;
    n = M_r_outN;
    alufn = M_r_alufn;
    progress = 16'h0000;
    index = M_reg_index_q;
    M_aluUnit_a = a;
    M_aluUnit_b = b;
    M_aluUnit_alufn = alufn;
    computed = M_aluUnit_out;
    out_calc = computed;
    out_true = o;
    
    case (M_fsm_t_q)
      START_fsm_t: begin
        M_reg_index_d = 16'h8888;
        if (switch[1+0-:1]) begin
          M_fsm_t_d = S0_fsm_t;
        end else begin
          M_fsm_t_d = START_fsm_t;
        end
      end
      S0_fsm_t: begin
        M_register_address_d = 5'h00;
        progress = 16'h0001;
        M_reg_index_d = 16'h0026;
        if (fail_case == 5'h1a) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S1_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S1_fsm_t: begin
        M_register_address_d = 5'h01;
        progress = 16'h0003;
        M_reg_index_d = 16'h0025;
        if (fail_case == 5'h19) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S2_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S2_fsm_t: begin
        M_register_address_d = 5'h02;
        progress = 16'h0003;
        M_reg_index_d = 16'h0024;
        if (fail_case == 5'h18) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S3_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S3_fsm_t: begin
        M_register_address_d = 5'h03;
        progress = 16'h0007;
        M_reg_index_d = 16'h0023;
        if (fail_case == 5'h17) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S4_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S4_fsm_t: begin
        M_register_address_d = 5'h04;
        progress = 16'h000f;
        M_reg_index_d = 16'h0022;
        if (fail_case == 5'h16) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S5_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S5_fsm_t: begin
        M_register_address_d = 5'h05;
        progress = 16'h000f;
        M_reg_index_d = 16'h0021;
        if (fail_case == 5'h15) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S6_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S6_fsm_t: begin
        M_register_address_d = 5'h06;
        progress = 16'h000f;
        M_reg_index_d = 16'h0020;
        if (fail_case == 5'h14) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S7_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S7_fsm_t: begin
        M_register_address_d = 5'h07;
        progress = 16'h001f;
        M_reg_index_d = 16'h0019;
        if (fail_case == 5'h13) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S8_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S8_fsm_t: begin
        M_register_address_d = 5'h08;
        progress = 16'h001f;
        M_reg_index_d = 16'h0018;
        if (fail_case == 5'h12) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S9_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S9_fsm_t: begin
        M_register_address_d = 5'h09;
        progress = 16'h001f;
        M_reg_index_d = 16'h0017;
        if (fail_case == 5'h11) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S10_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S10_fsm_t: begin
        M_register_address_d = 5'h0a;
        progress = 16'h003f;
        M_reg_index_d = 16'h0016;
        if (fail_case == 5'h10) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S11_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S11_fsm_t: begin
        M_register_address_d = 5'h0b;
        progress = 16'h007f;
        M_reg_index_d = 16'h0015;
        if (fail_case == 5'h0f) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S12_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S12_fsm_t: begin
        M_register_address_d = 5'h0c;
        progress = 16'h00ff;
        M_reg_index_d = 16'h0014;
        if (fail_case == 5'h0e) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S13_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S13_fsm_t: begin
        M_register_address_d = 5'h0d;
        progress = 16'h00ff;
        M_reg_index_d = 16'h0013;
        if (fail_case == 5'h0d) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S14_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S14_fsm_t: begin
        M_register_address_d = 5'h0e;
        progress = 16'h01ff;
        M_reg_index_d = 16'h0012;
        if (fail_case == 5'h0c) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S15_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S15_fsm_t: begin
        M_register_address_d = 5'h0f;
        progress = 16'h03ff;
        M_reg_index_d = 16'h0011;
        if (fail_case == 5'h0b) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S16_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S16_fsm_t: begin
        M_register_address_d = 5'h10;
        progress = 16'h03ff;
        M_reg_index_d = 16'h0010;
        if (fail_case == 5'h0a) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S17_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S17_fsm_t: begin
        M_register_address_d = 5'h11;
        progress = 16'h07ff;
        M_reg_index_d = 16'h0009;
        if (fail_case == 5'h09) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S18_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S18_fsm_t: begin
        M_register_address_d = 5'h12;
        progress = 16'h0fff;
        M_reg_index_d = 16'h0008;
        if (fail_case == 5'h08) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S19_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S19_fsm_t: begin
        M_register_address_d = 5'h13;
        progress = 16'h1fff;
        M_reg_index_d = 16'h0007;
        if (fail_case == 5'h07) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S20_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S20_fsm_t: begin
        M_register_address_d = 5'h14;
        progress = 16'h1fff;
        M_reg_index_d = 16'h0006;
        if (fail_case == 5'h06) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S21_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S21_fsm_t: begin
        M_register_address_d = 5'h15;
        progress = 16'h3fff;
        M_reg_index_d = 16'h0005;
        if (fail_case == 5'h05) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S22_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S22_fsm_t: begin
        M_register_address_d = 5'h16;
        progress = 16'h3fff;
        M_reg_index_d = 16'h0004;
        if (fail_case == 5'h04) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S23_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S23_fsm_t: begin
        M_register_address_d = 5'h17;
        progress = 16'h3fff;
        M_reg_index_d = 16'h0003;
        if (fail_case == 5'h03) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S24_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S24_fsm_t: begin
        M_register_address_d = 5'h18;
        progress = 16'h7fff;
        M_reg_index_d = 16'h0002;
        if (fail_case == 5'h02) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = S25_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      S25_fsm_t: begin
        M_register_address_d = 5'h19;
        progress = 16'h7fff;
        M_reg_index_d = 16'h0001;
        if (fail_case == 5'h01) begin
          o[0+0-:1] = ~o[0+0-:1];
        end
        if (computed == o & M_aluUnit_z == z & M_aluUnit_v == v & M_aluUnit_n == n) begin
          M_fsm_t_d = PASS_fsm_t;
        end else begin
          M_fsm_t_d = FAIL_fsm_t;
        end
      end
      PASS_fsm_t: begin
        status = 2'h3;
        progress = 16'hffff;
        M_reg_index_d = 16'h0000;
        if (switch[0+0-:1]) begin
          M_fsm_t_d = START_fsm_t;
        end else begin
          M_fsm_t_d = PASS_fsm_t;
        end
      end
      FAIL_fsm_t: begin
        progress = a;
        status = 2'h2;
        if (button) begin
          M_fsm_t_d = B_fsm_t;
        end else begin
          if (switch[0+0-:1]) begin
            M_fsm_t_d = START_fsm_t;
          end else begin
            M_fsm_t_d = FAIL_fsm_t;
          end
        end
      end
      B_fsm_t: begin
        progress = b;
        status = 2'h1;
        if (button) begin
          M_fsm_t_d = ALUFN_fsm_t;
        end else begin
          if (switch[0+0-:1]) begin
            M_fsm_t_d = START_fsm_t;
          end else begin
            M_fsm_t_d = B_fsm_t;
          end
        end
      end
      ALUFN_fsm_t: begin
        progress = alufn;
        status = 2'h3;
        if (button) begin
          M_fsm_t_d = FAIL_fsm_t;
        end else begin
          if (switch[0+0-:1]) begin
            M_fsm_t_d = START_fsm_t;
          end else begin
            M_fsm_t_d = ALUFN_fsm_t;
          end
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_register_address_q <= 1'h0;
    end else begin
      M_register_address_q <= M_register_address_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_index_q <= 16'h0000;
    end else begin
      M_reg_index_q <= M_reg_index_d;
    end
  end
  
  
  always @(posedge M_slowclock_value) begin
    if (rst == 1'b1) begin
      M_fsm_t_q <= 1'h0;
    end else begin
      M_fsm_t_q <= M_fsm_t_d;
    end
  end
  
endmodule
