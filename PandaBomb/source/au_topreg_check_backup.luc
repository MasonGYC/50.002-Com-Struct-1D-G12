module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  //init slow clock 
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }

  regfile regfile(.clk(clk), .rst(rst));
 
  //multi_seven_seg
  multi_seven_seg seg(.clk(clk), .rst(rst));

  //button_conditioner
  button_conditioner buttoncond[5](.clk(clk));
  edge_detector buttondetector[5](#RISE(1), #FALL(0),.clk(clk)); //detect on rising edge only
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    // button
    buttoncond.in = io_button[4:0];
    buttondetector.in = buttoncond.out;

    //7-seg
    io_seg = ~seg.seg; // connect segments to the driver
    io_sel = ~seg.sel; // connect digit select to the driver
    
    //connection
    regfile.ra = 5hB;
    regfile.rb = 5b1;
    regfile.rc = 5hB;
    regfile.we = 1;
    regfile.write_data = 16b0001000100000001;
    regfile.level_in = 16b1;
    regfile.in_time = 16b1101;
    regfile.orientation_in = 0;
    seg.values = {4h8,4h8,4h8,4h8};
    if (io_dip[0][0] == 1){
      seg.values = {4h0,4h0,4h0,4h0};
      io_led[0] = regfile.orientation_out[7:0]; //0
      io_led[1] = regfile.level_out[7:0];//1 ?=0
      io_led[2] = regfile.out_time[7:0];//1101
    }
    else if (io_dip[0][1] == 1){
      seg.values = {4h0,4h0,4h0,4h1};
      io_led[0] = regfile.xpos[7:0];//0
      io_led[1] = regfile.ypos[7:0];//0
      io_led[2] = regfile.ra_data[7:0];//16b0001000100000001
    }
    else if (io_dip[0][2] == 1){
      seg.values = {4h0,4h0,4h0,4h2};
      io_led[0] = regfile.out_time[7:0]; //0
      io_led[1] = regfile.rb_data[7:0];//0
      io_led[2] = regfile.maprow1[7:0];// ?0
    }
    else if (io_dip[0][3] == 1){
      seg.values = {4h0,4h0,4h0,4h3};
      io_led[1] = regfile.maprow2[7:0];
      io_led[2] = regfile.maprow3[7:0];
    }
    else if (io_dip[0][4] == 1){
      seg.values = {4h0,4h0,4h0,4h4};
      io_led[0] = regfile.maprow4[7:0]; //0
      io_led[1] = regfile.maprow5[7:0];
      io_led[2] = regfile.maprow6[7:0];
    }
    else if (io_dip[0][5] == 1){
      seg.values = {4h0,4h0,4h0,4h5};
      io_led[0] = regfile.maprow7[7:0]; //0
      io_led[1] = regfile.maprow8[7:0];
    }
    
    
 

      // 16b00000100,              // level 1 map row 1
//       16b00010110,              // level 1 map row 2
//       16b10000001,              // level 1 map row 3
//       16b00010100,              // level 1 map row 4
//       16b00110010,              // level 1 map row 5
//       16b10000000,              // level 1 map row 6
//       16b00100100,              // level 1 map row 7
//       16b00000000              // level 1 map row 8
    
      

    }
}