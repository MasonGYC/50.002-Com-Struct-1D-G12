module control_unit (
//the overall control_unit of the game
    input clk,  // clock
    input rst,  // reset

    input level_in[1], //current level
    output level_out[1], //next level
    
    input start, //START button
    input reset, //RESET button
    input timer, //remaining time 
    
    input up[1], //move
    input down[1],
    input left[1],
    input right[1],
    
    input map[8][8],
    
    input direction[2], //up:2b00 d:2b01 l:2b10 r:2b11
    input x_pos_in[3], //suppose 3 bit for x and y coordinate 0-7
    input y_pos_in[3],
    output x_pos_out[3],
    output y_pos_out[3];
    
  ) {
      //sig


    //init
    //preprocess unit for change position to 1 bit decimal
    dff x_temp[1](#INIT(0), .clk(clk), .rst(rst)); //code in decimal
    dff y_temp[1](#INIT(0), .clk(clk), .rst(rst)); //code in decimal
    dff level_temp[1](#INIT(0), .clk(clk), .rst(rst)); //code in decimal
  
    fsm ctrl(.clk(clk),.rst(rst))={
        START, //wait for start button
        GENERATE_MAP, //map -> idle
        IDLE,
        CHECK_BORDER,
        CHECK_GOAL, //check whether reached goal
        CHECK_COLL, //check obstacle
        GAMEOVER,
        WIN};
  

  always {

    //connection
    x_temp.d = x_pos_in;
    y_temp.d = y_pos_in;
    x_pos_out = x_temp.q;
    y_pos_out = y_temp.q;
    level_temp.d = level_in;
    level_out = level_temp.q;

    //check timer
    if (timer > 60){ctrl.d = ctrl.GAMEOVER;}//exceed time

    //fms ctrl
    case(ctrl.q){

        ctrl.START:
            if (start == 1){ctrl.d = ctrl.GENERATE_MAP;}
            else{ctrl.d = ctrl.START;}
     
        //////////////////////////////
        ctrl.GENERATE_MAP:
            case(level_in){
            0: 
            //generate map 0

            1:
            //generate map 1

            2:
            //generate map 2


            }
            ctrl.d = ctrl.IDLE;
        //////////////////////////////
        ctrl.IDLE:
            if (left==1 || right==1 || up==1 || down==1){
                //change position temp
                case(direction){
                    2b00: y_temp.d = y_temp.q + 1;
                    2b01:y_temp.d = y_temp.q - 1;
                    2b10:x_temp.d = x_temp.q + 1;
                    2b11:x_temp.d = x_temp.q - 1;
                }
                ctrl.d = ctrl.CHECK_GOAL;
            }
            else{ctrl.d = ctrl.IDLE;}
        //////////////////////////////
        ctrl.CHECK_GOAL:
            if (x_temp.q == b111 && y_temp.q == b111){
                ctrl.d = ctrl.WIN;
                }
            else {ctrl.d = ctrl.CHECK_BORDER;}

        //////////////////////////////
        ctrl.CHECK_BORDER:
            if (x_temp.q>b111 || x_temp.q <0 || y_temp.q>b111 || y_temp.q<0){
                ctrl.d = ctrl.IDLE;
            }
            else{ctrl.d = ctrl.CHECK_COLL;}
        //////////////////////////////
        ctrl.CHECK_COLL:
            if (map[x_temp.q][y_temp.q]==1){
                ctrl.d = ctrl.IDLE;
            }
            else{
                //write position from temp dff
                x_pos_out = x_temp.q;
                y_pos_out = y_temp.q;
                ctrl.d = ctrl.IDLE; 
        }
        //////////////////////////////
        ctrl.WIN:
            if (level_in < b10 && level_in >= b00){
                level_out = level_in + 1;
                ctrl.d = ctrl.START;
            }
            else {ctrl.d = ctrl.GAMEOVER;}
        //////////////////////////////
        ctrl.GAMEOVER:
        if (reset == 1){
            level_out = 0;
            ctrl.d=ctrl.START;
            }
        else{
            //show 7-seg msg
            ctrl.d = ctrl.GAMEOVER;}

        

    }
  }
}






