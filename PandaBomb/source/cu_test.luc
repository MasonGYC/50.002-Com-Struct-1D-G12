module cu_test (
    input clk, 
    input rst,

    input switch[2], // io_dip[2][7] is the toggle to start the auto_tester, io_dip[2][6] is the toggle to reset the auto_tester
    // input button,

    output status[2], // status for all test cases, b00 means still testing, b01 means PASS, b10 means FAIL;
    output progress[16],
    output index[4][4] // 4 digit index of test case in decimal for 7-seg
) {
    counter slowclock(#SIZE(1),#DIV(26),.clk(clk),.rst(rst));
    fsm fsm_t(.clk(slowclock.value),.rst(rst))={START, 
                                                S0, S1, S2, S3, S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19, // testing up down lefrt right and panda movement
                                                PASS, FAIL
                                                };

    control_unit cu(.clk(clk), .rst(rst));
    dff reg_index[4][4](#INIT({4h0,4h0,4h0,4h0}), .clk(clk), .rst(rst));
    //dff register_address[5](#INIT(0), .clk(clk), .rst(rst));

    always {
        status = b00;
        progress = 16h0;
        index = reg_index.q;
        cu.z = 0;
    cu.start = 0;
    cu.reset=0;
    cu.timer = 0;
    cu.direction = 0;
    cu.level_in = 3;

        case(fsm_t.q) {
            fsm_t.START:
                reg_index.d = {4h0,4h0,4h0,4h0};
                if (switch[1]) {// if io_dip[2][7] is high then start the auto_tester
                    fsm_t.d = fsm_t.S0; // start auto tester
                } 
                else {
                    fsm_t.d = fsm_t.START;
                }
            fsm_t.S0:
                progress = 16h1;
                reg_index.d = {4h0,4h0,4h0,4h1};
                cu.start = b1; // next state move to generate map
                fsm_t.d = fsm_t.S1;
            
            fsm_t.S1: // state generate map
                progress = 16h1;
                reg_index.d = {4h0,4h0,4h0,4h2};
                
                if (cu.we != 1 || cu.game_start != 1) {
                    fsm_t.d = fsm_t.FAIL;
                }
                else {
                    fsm_t.d = fsm_t.S2; // move onto generate map row 1
                }

            fsm_t.S2: // generate map row 1
                progress = 16h2;
                reg_index.d = {4h0,4h0,4h0,4h3};

                if (cu.rc != 5h0 || cu.we != 1) {
                    fsm_t.d = fsm_t.FAIL;
                }
                else {
                    fsm_t.d = fsm_t.S3; // move onto generate map row 2
                }
            
            fsm_t.S3: // generate map row 2
                progress = 16h3;
                reg_index.d = {4h0,4h0,4h0,4h4};

                if (cu.rc != 5h1 || cu.we != 1) {
                    fsm_t.d = fsm_t.FAIL;
                }
                else {
                    fsm_t.d = fsm_t.S4; // move onto generate map row 3
                }
            
            fsm_t.S4: // generate map row 3
                progress = 16h4;
                reg_index.d = {4h0,4h0,4h0,4h5};

                if (cu.rc != 5h2 || cu.we != 1) {
                    fsm_t.d = fsm_t.FAIL;
                }
                else {
                    fsm_t.d = fsm_t.S5; // move onto generate map row 4
                }

            fsm_t.S5: // generate map row 4
                progress = 16h5;
                reg_index.d = {4h0,4h0,4h0,4h6};

                if (cu.rc != 5h3 || cu.we != 1) {
                    fsm_t.d = fsm_t.FAIL;
                }
                else {
                    fsm_t.d = fsm_t.S6; // move onto generate map row 5
                }
            
            fsm_t.S6: // generate map row 5
                progress = 16h6;
                reg_index.d = {4h0,4h0,4h0,4h7};

                if (cu.rc != 5h4 || cu.we != 1) {
                    fsm_t.d = fsm_t.FAIL;
                }
                else {
                    fsm_t.d = fsm_t.S7; // move onto generate map row 6
                }
            
            fsm_t.S7: // generate map row 6
                progress = 16h7;
                reg_index.d = {4h0,4h0,4h0,4h8};

                if (cu.rc != 5h5 || cu.we != 1) {
                    fsm_t.d = fsm_t.FAIL;
                }
                else {
                    fsm_t.d = fsm_t.S8; // move onto generate map row 7
                }
            
            fsm_t.S8: // generate map row 7
                progress = 16h8;
                reg_index.d = {4h0,4h0,4h0,4h9};

                if (cu.rc != 5h6 || cu.we != 1) {
                    fsm_t.d = fsm_t.FAIL;
                }
                else {
                    fsm_t.d = fsm_t.S9; // move onto generate map row 8
                }

            fsm_t.S9: // generate map row 8
                progress = 16h9;
                reg_index.d = {4h0,4h0,4h1,4h0};

                if (cu.rc != 5h7 || cu.we != 1) {
                    fsm_t.d = fsm_t.FAIL;
                }
                else {
                    fsm_t.d = fsm_t.S10; // move onto idle state of game,
                }
            
            fsm_t.S10: // idle state of game
                progress = 16hA;
                reg_index.d = {4h0,4h0,4h1,4h1};
                
                cu.direction = 4b1000; // input a up direction. test if up selector signals are correct

                if (cu.ra != 5hD || cu.rb != 5hA || cu.rc != 5hD || cu.asel != 4b0 || cu.bsel != 4b1 || cu.alufn != 6b0 || cu.we != 1b1 || cu.wdsel != 3b0) { 
                    fsm_t.d = fsm_t.FAIL;
                }
                else {
                    fsm_t.d = fsm_t.S11; // move onto check goal x state
                }
            
            fsm_t.S11: // check goal x state
                progress = 16hB;
                reg_index.d = {4h0,4h0,4h1,4h2};

                // const X_TEMP = 5hE;
                // const Y_TEMP = 5hD;
                // const RANDOM = 5hA; 

                if (cu.ra != 5hE || cu.rb != 5hA || cu.rc != 5hC || cu.asel != 4b0 || cu.bsel != 4b0111 || cu.alufn != 6b110011 || cu.we != 1 || cu.wdsel != 3b0) { 
                    fsm_t.d = fsm_t.FAIL;
                }
                else {
                    fsm_t.d = fsm_t.S12; // move onto check goal y state
                }
            
            fsm_t.S12: // check goal y state
                progress = 16hC;
                reg_index.d = {4h0,4h0,4h1,4h3};

                // const X_TEMP = 5hE;
                // const Y_TEMP = 5hD;
                // const RANDOM = 5hA; 

                if (cu.ra != 5hD || cu.rb != 5hA || cu.rc != 5hB || cu.asel != 4b0 || cu.bsel != 4b0111 || cu.alufn != 6b110011 || cu.we != 1 || cu.wdsel != 3b0) { 
                    fsm_t.d = fsm_t.FAIL;
                }
                else {
                    fsm_t.d = fsm_t.S13; // move onto check goal x state
                }
            
            fsm_t.S13: // check goal xy state
                progress = 16hD;
                reg_index.d = {4h0,4h0,4h1,4h4};

                // const X_TEMP = 5hE;
                // const Y_TEMP = 5hD;
                // const RANDOM = 5hA; 

                if (cu.ra != 5hB || cu.rb != 5hC || cu.rc != 5h10 || cu.asel != 4b0 || cu.bsel != 4b0 || cu.alufn != 6b011000 || cu.we != 1 || cu.wdsel != 3b0) { 
                    fsm_t.d = fsm_t.FAIL;
                }
                else {
                    fsm_t.d = fsm_t.S14; // move onto check goal xy move state
                }
            
            fsm_t.S14: // check goal xy move state
                progress = 16hE;
                reg_index.d = {4h0,4h0,4h1,4h5};

                cu.z = 1; // input z = 1 into cu
                fsm_t.d = fsm_t.S15; // move to CHECK_BORDER_XRIGHT 

            fsm_t.S15: // check border xright state
                progress = 16hF;
                reg_index.d = {4h0,4h0,4h1,4h6};

                // const X_TEMP = 5hE;
                // const Y_TEMP = 5hD;
                // const RANDOM = 5hA; 

                if (cu.ra != 5hE || cu.rb != 5hA || cu.rc != 5h10 || cu.asel != 4b0 || cu.bsel != 4b0111 || cu.alufn != 6b110011 || cu.we != 1 || cu.wdsel != 3b0) { 
                    fsm_t.d = fsm_t.FAIL;
                }
                else {
                    fsm_t.d = fsm_t.S16; // move onto check border xleft state
                }

            fsm_t.S16: // check border xleft state
                progress = 16h10;
                reg_index.d = {4h0,4h0,4h1,4h7};

                // const X_TEMP = 5hE;
                // const Y_TEMP = 5hD;
                // const RANDOM = 5hA; 

                if (cu.ra != 5hE || cu.rb != 5hA || cu.rc != 5h11 || cu.asel != 4b0 || cu.bsel != 4b1010 || cu.alufn != 6b110101 || cu.we != 1 || cu.wdsel != 3b0) { 
                    fsm_t.d = fsm_t.FAIL;
                }
                else {
                    fsm_t.d = fsm_t.S17; // move onto check border yright state
                }
            
            fsm_t.S17: // check border yright state
                progress = 16h11;
                reg_index.d = {4h0,4h0,4h1,4h8};

                // const X_TEMP = 5hE;
                // const Y_TEMP = 5hD;
                // const RANDOM = 5hA; 

                if (cu.ra != 5hD || cu.rb != 5hA || cu.rc != 5h12 || cu.asel != 4b0 || cu.bsel != 4b0111 || cu.alufn != 6b110111 || cu.we != 1 || cu.wdsel != 3b0) { 
                    fsm_t.d = fsm_t.FAIL;
                }
                else {
                    fsm_t.d = fsm_t.S18; // move onto check border yleft state
                }

            fsm_t.S18: // check border yleft state
                progress = 16h12;
                reg_index.d = {4h0,4h0,4h1,4h9};

                // const X_TEMP = 5hE;
                // const Y_TEMP = 5hD;
                // const RANDOM = 5hA; 

                if (cu.ra != 5hD || cu.rb != 5hA || cu.rc != 5h13 || cu.asel != 4b0 || cu.bsel != 4b1010 || cu.alufn != 6b110101 || cu.we != 1 || cu.wdsel != 3b0) { 
                    fsm_t.d = fsm_t.FAIL;
                }
                else {
                    fsm_t.d = fsm_t.S19; // move onto check border zero state
                }
            
            fsm_t.S19: // check border zero state
                progress = 16h13;
                reg_index.d = {4h0,4h0,4h2,4h0};

                cu.z = 0; // input z = 0 into cu

                if (cu.ra != 5h10 || cu.rb != 5h12 || cu.rc != 5h10 || cu.asel != 4b0 || cu.bsel != 4b0 || cu.alufn != 6b010001 || cu.we != 0 || cu.wdsel != 3b0) { 
                    fsm_t.d = fsm_t.FAIL;
                }
                else {
                    fsm_t.d = fsm_t.PASS; // move onto idle state / pass state done with test (did not check further on updating process of CU)
                }
            
            fsm_t.PASS: // pass state
                status = b11;
                progress = 16h14;
                reg_index.d = {4h0,4h0,4h2,4h1};

                if (switch[0]){ // if io_dip[2][6] is high, then reset the auto_tester by going back to the START state
                    fsm_t.d = fsm_t.START; // go back to the START state
                }
                else{ // else, keep waiting for the io_dip[2][6] to be high
                    fsm_t.d = fsm_t.PASS;
                }
            
            fsm_t.FAIL:
                progress=6h15;
                status = b10;
                if (switch[0]){ // if io_dip[2][6] is high, then reset the auto_tester by going back to the START state
                    fsm_t.d = fsm_t.START; // go back to the START state
                }
                else{
                    fsm_t.d = fsm_t.FAIL;
                }
                    
                        
        }
    }

}


