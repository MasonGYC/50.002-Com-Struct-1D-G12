module rom_control_unit_test ( // TODO: revist again after sunday meeting
    input address[5],  // ROM address
    output level_in[1],
    output start[1],
    output reset[1],
    output timer[6],
    output up[1],
    output down[1],
    output left[1],
    output right[1],
    output map[8][8],
    output direction[1],
    output x_pos_in[3],//set as 3 bits
    output y_pos_in[3],
    output x_pos_out[3],
    output y_pos_out[3],
    output level_out[1];
    
  ) {
 
  // 25 testcases in the format of 
  // level_in start reset timer up down left right map[8][8] direction x_pos_in y_pos_in x_pos_out y_pos_out level_out
  const TESTCASES_CU =      
  { 
    {1, 1, 0, 40, 1, 0, 0, 0,                      // test if move up is working when pos is (0,0)  should not be able to move up
        {
            {0, 0, 0, 0, 0, 1, 0, 0},              // level 1 map row 1
            {0, 0, 0, 1, 0, 1, 1, 0},              // level 1 map row 2
            {1, 0, 0, 0, 0, 0, 0, 1},              // level 1 map row 3
            {0, 0, 0, 1, 0, 1, 0, 0},              // level 1 map row 4
            {0, 0, 1, 1, 0, 0, 1, 0},              // level 1 map row 5
            {1, 0, 0, 0, 0, 0, 0, 0},              // level 1 map row 6
            {0, 0, 1, 0, 0, 1, 0, 0},              // level 1 map row 7
            {0, 0, 0, 0, 0, 0, 0, 0},              // level 1 map row 8
        },              
        2b00, 0, 0, 0, 0, 1 //"up"
    },  

    {1, 1, 0, 40, 0, 1, 0, 0,                      // test if move down is working when pos is (0,0) should move to (0,1)
        {
            {0, 0, 0, 0, 0, 1, 0, 0},              // level 1 map row 1
            {0, 0, 0, 1, 0, 1, 1, 0},              // level 1 map row 2
            {1, 0, 0, 0, 0, 0, 0, 1},              // level 1 map row 3
            {0, 0, 0, 1, 0, 1, 0, 0},              // level 1 map row 4
            {0, 0, 1, 1, 0, 0, 1, 0},              // level 1 map row 5
            {1, 0, 0, 0, 0, 0, 0, 0},              // level 1 map row 6
            {0, 0, 1, 0, 0, 1, 0, 0},              // level 1 map row 7
            {0, 0, 0, 0, 0, 0, 0, 0},              // level 1 map row 8
        },              
        2b01, 0, 0, 0, 1, 1 //down
    },  

    {1, 1, 0, 40, 0, 0, 1, 0,                      // test if move left is working when pos is (0,0) should not be able to move, stay at (0,0)
        {
            {0, 0, 0, 0, 0, 1, 0, 0},              // level 1 map row 1
            {0, 0, 0, 1, 0, 1, 1, 0},              // level 1 map row 2
            {1, 0, 0, 0, 0, 0, 0, 1},              // level 1 map row 3
            {0, 0, 0, 1, 0, 1, 0, 0},              // level 1 map row 4
            {0, 0, 1, 1, 0, 0, 1, 0},              // level 1 map row 5
            {1, 0, 0, 0, 0, 0, 0, 0},              // level 1 map row 6
            {0, 0, 1, 0, 0, 1, 0, 0},              // level 1 map row 7
            {0, 0, 0, 0, 0, 0, 0, 0},              // level 1 map row 8
        },              
        2b10, 0, 0, 0, 0, 1 //left
    },

    {1, 1, 0, 40, 0, 0, 0, 1,                      // test if move right is working when pos is (0,0) should move to (1,0)
        {
            {0, 0, 0, 0, 0, 1, 0, 0},              // level 1 map row 1
            {0, 0, 0, 1, 0, 1, 1, 0},              // level 1 map row 2
            {1, 0, 0, 0, 0, 0, 0, 1},              // level 1 map row 3
            {0, 0, 0, 1, 0, 1, 0, 0},              // level 1 map row 4
            {0, 0, 1, 1, 0, 0, 1, 0},              // level 1 map row 5
            {1, 0, 0, 0, 0, 0, 0, 0},              // level 1 map row 6
            {0, 0, 1, 0, 0, 1, 0, 0},              // level 1 map row 7
            {0, 0, 0, 0, 0, 0, 0, 0},              // level 1 map row 8
        },              
        2b11, 0, 0, 1, 0, 1 //right
    },              

    {1, 1, 0, 40, 0, 0, 0, 1,                      // test if level up is working
        {
            {0, 0, 0, 0, 0, 1, 0, 0},              // level 1 map row 1
            {0, 0, 0, 1, 0, 1, 1, 0},              // level 1 map row 2
            {1, 0, 0, 0, 0, 0, 0, 1},              // level 1 map row 3
            {0, 0, 0, 1, 0, 1, 0, 0},              // level 1 map row 4
            {0, 0, 1, 1, 0, 0, 1, 0},              // level 1 map row 5
            {1, 0, 0, 0, 0, 0, 0, 0},              // level 1 map row 6
            {0, 0, 1, 0, 0, 1, 0, 0},              // level 1 map row 7
            {0, 0, 0, 0, 0, 0, 0, 0},              // level 1 map row 8
        },              
        2b11, 8, 8, 8, 8, 2 //right
    },  


  };

  always {
    x_pos_out = TESTCASES_CU[address][2]; //NOTE: indexing order in array in lucid: 0 starts from right
    y_pos_out = TESTCASES_CU[address][1]; 
    level_out = TESTCASES_CU[address][0];

    level_in = TESTCASES_CU[address][14];
    start = TESTCASES_CU[address][13];
    reset = TESTCASES_CU[address][12];
    timer = TESTCASES_CU[address][11];
    up = TESTCASES_CU[address][10];
    down = TESTCASES_CU[address][9];
    left = TESTCASES_CU[address][8];
    right = TESTCASES_CU[address][7];
    map[8][8] = TESTCASES_CU[address][6];
    direction = TESTCASES_CU[address][5];
    x_pos_in = TESTCASES_CU[address][4];
    y_pos_in = TESTCASES_CU[address][3];
  }
}

// 6 hex digits
// 1 byte is 8 binary bits
// 1 byte is 2 hex digits
// 1 hex digit is 4 binary bits