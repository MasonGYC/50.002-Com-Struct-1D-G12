module au_top (
    input clk,              // 100MHz clock

    input usb_rx,           // don't know what is this
    output usb_tx,          // don't know what is this
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield

    input rst_n,
    input io_dip [3][8],

    // auto_check
    input io_button [5],

    // 8x8 LED
    output led [8][8][24],

    // joystick button
    input up_button,
    input down_button,
    input left_button,
    input right_button,
    input reset_button,
    input start_button
    
    ) {
    sig rst;                  // reset signal

    // init slow clock 
    .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    }
    auto_checker_control_unit auto_checker_control_unit(.clk(clk), .rst(rst));
    auto_checker_regfile auto_checker_regfile(.clk(clk), .rst(rst));

    // multi_seven_seg
    multi_seven_seg seg(.clk(clk), .rst(rst));

    //button_conditioner
    button_conditioner buttoncond[6](.clk(clk));
    edge_detector buttondetector[6](#RISE(1), #FALL(0),.clk(clk)); //detect on rising edge only
  
    ///////////////////////
    // module initializtaion//
    alu alu;
    maps rom;
    regfile regfile(.clk(clk), .rst(rst));
    wdselmux wdselmux;
    abselmux aselmux;
    abselmux bselmux;
    joystick_input joystick_input;
    orientation_unit orientation_unit; 
    control_unit control_unit(.clk(clk), .rst(rst));

    always { 
        reset_cond.in = ~rst_n; // input raw inverted reset signal
        rst = reset_cond.out;   // conditioned reset

        // TODO: turn everything off: LEDs/seven segments
        usb_tx = usb_rx;        // loop serial port
        led = 8x{{8x{{24h0}}}};             // turn LEDs off
        io_seg = 8hff;          // turn segments off
        io_sel = 4hf;           // select no digits
    
        /////////////////////////
        //auto_check connection//
    
        // initialization
        auto_checker_control_unit.fail_case = 5b0;
        auto_checker_control_unit.switch[1] = 0;
        auto_checker_control_unit.switch[0] = 0;
        auto_checker_control_unit.button = 0;

        auto_checker_regfile.fail_case = 5b0;
        auto_checker_regfile.switch[1] = 0;
        auto_checker_regfile.switch[0] = 0;
        auto_checker_regfile.button = 0;
    
        /////////////////////////
        //module connection//

        // button joystick & start reset
        buttoncond.in[0] = up_button;
        buttoncond.in[1] = down_button;
        buttoncond.in[2] = left_button;
        buttoncond.in[3] = right_button;
        buttoncond.in[4] = start_button;
        buttoncond.in[5] = reset_button;
        buttondetector.in = buttoncond.out;
    
        // receive joystick input
        joystick_input.up_button=buttondetector.out[0];
        joystick_input.down_button=buttondetector.out[1];
        joystick_input.left_button=buttondetector.out[2];
        joystick_input.right_button=buttondetector.out[3];
    
        // joystick -> orientation_unit
        orientation_unit.joystick = joystick_input.joystick;
        orientation_unit.orientation_state = regfile.level_out;
        
        // control_unit input
        control_unit.start = buttondetector.out[4]; //start_button
        control_unit.reset = buttondetector.out[5];
        control_unit.direction = orientation_unit.direction; //orientation_unit -> control_unit
        //control_unit output
        regfile.we = control_unit.we;
        regfile.ra = control_unit.ra;
        regfile.rb = control_unit.rb;
        regfile.rc = control_unit.rc;
        aselmux.sel = control_unit.asel;
        bselmux.sel = control_unit.bsel;
        wdselmux.wdsel = control_unit.wdsel;
        alu.alufn = control_unit.alufn;
        
        //regffile -> abselmux -> alu
        aselmux.rdata = regfile.ra_data;
        bselmux.rdata = regfile.rb_data;
        alu.a = aselmux.out;
        alu.b = bselmux.out;
    
        // alu -> wdselmux&rom -> regfile
        wdselmux.alu = alu.out;
        rom.address = alu.out;
        wdselmux.mrd = rom.out_row;
        regfile.write_data = wdselmux.out;
        rom.level_input = regfile.level_out;
    
        //regfile connection

        
    
    
        
        


    
        //
    

        // 7-seg
        io_seg = ~seg.seg;  // connect segments to the driver
        io_sel = ~seg.sel;  // connect digit select to the driver

        case (io_dip[2][7]){
            1:  // auto check
            case (io_dip[2][6]){
                1:  // auto_checker_control_unit
                auto_checker_control_unit.button = io_button[4];
                auto_checker_control_unit.switch[1] = io_dip[2][7];
                auto_checker_control_unit.switch[0] = io_dip[2][6];
                auto_checker_control_unit.fail_case = io_dip[2][4:0];

                default:  // auto_checker_regfile
                auto_checker_regfile.button = io_button[4];
                auto_checker_regfile.switch[1] = io_dip[2][7];
                auto_checker_regfile.switch[0] = io_dip[2][6];
                auto_checker_regfile.fail_case = io_dip[2][4:0];
            }

            default:
            // TODO:
            // Firstly, set buttons/joysticks to control_unit
            // Secondly, set the output of control_unit to ALU
            // Thirdly, set the output of ALU to Regfile
            // Finally, connect Regfile to LEDs
        }
    } 
