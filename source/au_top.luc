module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  //init slow clock 
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  manual_check checker(.clk(clk), .rst(rst));
  auto_check auto_checker(.clk(clk), .rst(rst));
 
  //multi_seven_seg
  multi_seven_seg seg(.clk(clk), .rst(rst));

  //button_conditioner
  button_conditioner buttoncond[5](.clk(clk));
  edge_detector buttondetector[5](#RISE(1), #FALL(0),.clk(clk)); //detect on rising edge only
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    // initialization
    auto_checker.switch[1] = 0;
    auto_checker.switch[0] = 0;
    auto_checker.fail_case = 5b0;
    auto_checker.button = 0;
    
    checker.io_button = 0;
    checker.io_dip = 16b0;
    
    // button
    buttoncond.in = io_button[4:0];
    buttondetector.in = buttoncond.out;

    //7-seg
    io_seg = ~seg.seg; // connect segments to the driver
    io_sel = ~seg.sel; // connect digit select to the driver
    
    //result = io_dip[1] * io_dip[0]; // multiply the switch values
    //io_led = $build(result, 3); // convert result from a 24-bit array to a 3x8 array  
    
    case (io_dip[2][7]){
      1:
      // auto
      auto_checker.button = io_button[4]; // commented
      auto_checker.switch[1] = io_dip[2][7];
      auto_checker.switch[0] = io_dip[2][6];
      auto_checker.fail_case = io_dip[2][4:0];    // fail_case
      io_led[2][7:6] = auto_checker.status;
      io_led[0] = auto_checker.progress[7:0];
      io_led[1] = auto_checker.progress[15:8];
      
      //7-seg
      seg.values = auto_checker.index;

      default:
      // manual
      io_led[2][0] = io_button[0];
      checker.io_button = buttondetector.out[0];
      
      // close 7-seg
      seg.values = {4h0,4h0,4h0,4h0};
      io_seg = 8hff;        
  
      // input
      checker.io_dip[7:0] = io_dip[0];
      checker.io_dip[15:8] = io_dip[1];

      // result output
      io_led[0] = checker.out[7:0];
      io_led[1] = checker.out[15:8];
      io_led[2][4] = checker.ex;
      io_led[2][1] = checker.z;
      io_led[2][2] = checker.v;
      io_led[2][3] = checker.n;
    }
}