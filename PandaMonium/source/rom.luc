module rom (
    input address[5],  // ROM address
    output outA[16],
    output outB[16],
    output alufn[6],
    output correct_answer[16],
    output outZ[1],        
    output outV[1],
    output outN[1]  
  ) {
 
  // 25 testcases in the format of 
  //ALUNF[5:0]  a   b  correct_ans  correct_z  correct_v  correct_n 
  // TODO : connect address to individual test cases (Done)
  const TESTCASES =      
  { 
    {16b000000, 16h0003, 16h0003, 16h0006, 16b0, 16b0, 16b0},              //   S1: 3 + 3 = 6
    {16b000000, 16h7fff, 16h0001, 16h8000, 16b0, 16b1, 16b1},              //   S2: 32767 + 1 = -32768, overflow
    {16b000000, 16hffec, 16h0014, 16h0000, 16b1, 16b0, 16b0},              //   S3:  -20 + 20 = 0
    
    {16b000001, 16h0001, 16h0001, 16h0000, 16b1, 16b0, 16b0},              //   S4:  1 - 1 = 0
    {16b000001, 16h8000, 16h0001, 16h7fff, 16b0, 16b1, 16b0},              //   S5: -32768 - 1 = 32767, overflow,
    {16b000001, 16h0014, 16h0005, 16h000f, 16b0, 16b0, 16b0},              //   S6: 20 - 5 = 15
    {16b000001, 16hffec, 16h0005, 16hffe7, 16b0, 16b0, 16b1},              //   S7:  -20 - 5 = -25
    
    {16b000101, 16h001e, 16h001e, 16hffe2, 16b1, 16b0, 16b0},              //   S8: 30 -> -30
    
    {16b000010, 16h0014, 16h000a, 16h00c8, 16b0, 16b0, 16b0},              //   S9: 20 * 10 = 200
    {16b000011, 16h0004, 16h0002, 16h0002, 16b0, 16b0, 16b0},              //   S10: 4 / 2 = 2
    {16b000011, 16h000a, 16h0003, 16h0003, 16b0, 16b0, 16b0},              //   S11: 10 / 3 = 3
    {16b000100, 16h0008, 16h0002, 16h0000, 16b0, 16b0, 16b0},              //   S12: 8 % 2 = 0
    {16b000100, 16h000f, 16h0008, 16h0007, 16b0, 16b0, 16b0},              //   S13: 15 % 8 = 7

    {16b011000, 16b1010101111000101, 16b1111001101010100, 16b1010001101000100, 16b0, 16b0, 16b1},         // S14: and
    {16b011110, 16b1111001101010100, 16b1010101111000101, 16b1111101111010101, 16b0, 16b0, 16b1},         // S15: or
    {16b010110, 16b1010101111000101, 16b1111001101010100, 16b0101100010010001, 16b0, 16b0, 16b1},         // S16: xor
    {16b011010, 16b1010101111000101, 16b1111001101010100, 16b1010101111000101, 16b0, 16b0, 16b1},         // S17: a
    
    {16b110011, 16h0005, 16h0005, 16h0001, 16b1, 16b0, 16b0},              //    S18: 5 == 5
    {16b110011, 16h0004, 16h0001, 16h0000, 16b0, 16b0, 16b0},              //    S19: 4 == 1
    
    {16b110101, 16h8000, 16h0001, 16h0001, 16b0, 16b1, 16b0},              //    S20: -32768 < 1
    {16b110101, 16h0005, 16h0002, 16h0000, 16b0, 16b0, 16b0},              //    S21: 5 < 2
    
    {16b110111, 16hfffe, 16h0002, 16h0001, 16b0, 16b0, 16b1},              //    S22: -2 <= 2 
    {16b110111, 16h0002, 16h0002, 16h0001, 16b1, 16b0, 16b0},              //    S23: 2 <= 2
    
    {16b100000, 16hffff, 16h0004, 16hfff0, 16b0, 16b0, 16b0},              //    S24: shift left
    {16b100001, 16hffff, 16h0004, 16h0fff, 16b0, 16b0, 16b1},              //    S25: shift right
    {16b100011, 16hf0ff, 16h0004, 16hff0f, 16b0, 16b0, 16b1}               //    S25: shift right arith
  };

  always {
    alufn = TESTCASES[address][6][5:0];
    outA = TESTCASES[address][5];
    outB = TESTCASES[address][4];
    correct_answer = TESTCASES[address][3];
    outZ = TESTCASES[address][2][0];
    outV = TESTCASES[address][1][0];
    outN = TESTCASES[address][0][0];
  }
}