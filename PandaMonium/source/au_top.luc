module au_top (
  //version 1.5 final release
  //to change button ports, change alchitry.acf to declare new pins(currently using io_button)
  //normal clock with edge_detector. external button connnected
    
    input clk,              // 100MHz clock
    
    input usb_rx,           
    output usb_tx,          
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    output led [8],
    input rst_n,
    input io_dip [3][8],
    input io_button [5],
    input upButton,
    input rightButton,
    input downButton,
    input leftButton,
    input resetButton,
    
    
    // 8x8 LED
    output io_led[3][8],
    output br_led0, //row1
    output br_led1, //row1
    output br_led2, //row3
    output br_led3, //row4
    output br_led4, //row5
    output br_led5, //row6
    output br_led6, //row7
    output br_led7, //row8
    
    // 4 LED for displaying the UP direction
    output br_led8, //up
    output br_led9, //down
    output br_ledA, //left
    output br_ledB  //right
    
  ) {
  sig rst;                  // reset signal
  
  .clk(clk) {
    
    reset_conditioner reset_cond;
  }
  
  
  // multi_seven_seg
  multi_seven_seg seg(.clk(clk), .rst(rst));
  
  //button_conditioner
  button_conditioner buttoncond[5](.clk(clk));
  edge_detector buttondetector[5](#RISE(1), #FALL(0),.clk(clk)); //detect on rising edge only
  
  // module initializtaion//
  alu alu;
  regfile regfile(.clk(clk), .rst(rst));
  wdselmux wdselmux;
  aselmux aselmux;
  bselmux bselmux;
  led_output led_out;
  orientation_unit orientation_unit;
  control_unit control_unit(.clk(clk),.rst(rst));
  
  
  // ledstrips 
  ledstrip ledstrip0(#PIXEL_COUNT(8), .clk(clk), .rst(rst));
  ledstrip ledstrip1(#PIXEL_COUNT(8), .clk(clk), .rst(rst));
  ledstrip ledstrip2(#PIXEL_COUNT(8), .clk(clk), .rst(rst));
  ledstrip ledstrip3(#PIXEL_COUNT(8), .clk(clk), .rst(rst));
  ledstrip ledstrip4(#PIXEL_COUNT(8), .clk(clk), .rst(rst));
  ledstrip ledstrip5(#PIXEL_COUNT(8), .clk(clk), .rst(rst));
  ledstrip ledstrip6(#PIXEL_COUNT(8), .clk(clk), .rst(rst));
  ledstrip ledstrip7(#PIXEL_COUNT(8), .clk(clk), .rst(rst));
  
  
  always {
    // seven_seg debug
    seg.values = control_unit.seg_index;
    
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    io_led = 3x{{8h00}};
    usb_tx = usb_rx;        // loop serial port
    led = 8h00;             // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    
    ///////////////////////
    //external input connection
    
    //display leds
    //comment is the physical location of these leds
    br_led8 = orientation_unit.up_display[0];//up
    br_led9 = orientation_unit.up_display[1];//down
    br_ledA = orientation_unit.up_display[2];//left
    br_ledB = orientation_unit.up_display[3];//right
    
    //buttons 
    buttoncond.in[0] = rightButton;
    buttoncond.in[1] = upButton;
    buttoncond.in[2] = leftButton;
    buttoncond.in[3] = downButton;
    buttoncond.in[4] = resetButton;
    buttondetector.in = buttoncond.out;
    orientation_unit.button = buttondetector.out[3:0];
    //orientation_unit.button[0] = rightButton;
    //orientation_unit.button[1] = upButton;
    //orientation_unit.button[2] = leftButton;
    //orientation_unit.button[3] = downButton;
    control_unit.reset = buttondetector.out[4];
    
    //start switch
    control_unit.start = io_dip[0][0];
    led_out.game_start = io_dip[0][0];
    
    
    
    ///////////////////////
    //module connection//
    
    
    //regfile_orien <-> orientation_unit
    orientation_unit.orientation_state = regfile.orientation_out[1:0];
    
    // control_unit input
    control_unit.direction = orientation_unit.direction;
    control_unit.y_temp = regfile.y_temp;//for collision check
    control_unit.z = alu.z;
    
    
    //control_unit output -> regfile, selmuxes, alu
    regfile.we = control_unit.we;
    regfile.ra = control_unit.ra;
    regfile.rb = control_unit.rb;
    regfile.rc = control_unit.rc;
    regfile.clear = control_unit.clear;
    aselmux.sel = control_unit.asel;
    bselmux.sel = control_unit.bsel;
    wdselmux.wdsel = control_unit.wdsel;
    alu.alufn = control_unit.alufn;
    
    //regfile -> abselmux -> alu
    aselmux.rdata = regfile.ra_data;
    bselmux.rdata = regfile.rb_data;
    alu.a = aselmux.out;
    alu.b = bselmux.out;
    
    // alu -> wdselmux&rom -> regfile
    wdselmux.alu = alu.out;
    regfile.write_data = wdselmux.out;
    
    //led connection
    led_out.game_over = control_unit.game_over;
    led_out.x = regfile.xpos;
    led_out.y = regfile.ypos;
    led_out.map[0] = regfile.maprow1;
    led_out.map[1] = regfile.maprow2;
    led_out.map[2] = regfile.maprow3;
    led_out.map[3] = regfile.maprow4;
    led_out.map[4] = regfile.maprow5;
    led_out.map[5] = regfile.maprow6;
    led_out.map[6] = regfile.maprow7;
    led_out.map[7] = regfile.maprow8;
    
    
    // ////////////////////////
    // //external led output//

    ledstrip0.update=1;
    ledstrip0.color=led_out.row0[ledstrip0.pixel];
    br_led0=ledstrip0.led;
    
    ledstrip1.update=1;
    ledstrip1.color=led_out.row1[ledstrip1.pixel];
    br_led1=ledstrip1.led;
    
    ledstrip2.update=1;
    ledstrip2.color=led_out.row2[ledstrip2.pixel];
    br_led2=ledstrip2.led;
    
    ledstrip3.update=1;
    ledstrip3.color=led_out.row3[ledstrip3.pixel];
    br_led3=ledstrip3.led;
    
    ledstrip4.update=1;
    ledstrip4.color=led_out.row4[ledstrip4.pixel];
    br_led4=ledstrip4.led;
    
    ledstrip5.update=1;
    ledstrip5.color=led_out.row5[ledstrip5.pixel];
    br_led5=ledstrip5.led;
    
    ledstrip6.update=1;
    ledstrip6.color=led_out.row6[ledstrip6.pixel];
    br_led6=ledstrip6.led;
    
    ledstrip7.update=1;
    ledstrip7.color=led_out.row7[ledstrip7.pixel];
    br_led7=ledstrip7.led;
    
    //DEBUG io_led display
    io_led[0][2:0] = regfile.xpos[2:0];
    io_led[0][5:3] = regfile.ypos[2:0];
    io_led[1][2:0] = regfile.y_temp[2:0];
    io_led[1][5:3] = regfile.x_temp[2:0];
    io_led[2][2:0] = regfile.out_move_num[2:0];
    io_led[2][5:3] = regfile.orientation_out[2:0];
  
    // 7-seg
    io_seg = ~seg.seg;  // connect segments to the driver
    io_sel = ~seg.sel;  // connect digit select to the driver
    
  }
}
