module control_unit (
    //version 1.4 final release
    //to change button ports, change alchitry.acf to declare new pins(currently using io_button)
    //normal clock with edge_detector. external button connnected
    
    input clk,  // clock
    input rst,  // reset
    input z, // alu z
    output level_out[16],
    input direction[4], //up down LEFT RIGHT,
    input start[1], //START button
    input reset[1], //RESET button
    input y_temp[16], //content of Y_TEMP reg
    
    output move_num_out[16],
    output orientation_out[16],
    output alufn[6],
    output asel[4],
    output bsel[4],
    output we[1],
    output wdsel[2],
    output ra[5],
    output rb[5],
    output rc[5],
    output clear[1], //to clear all register values once new level
    output seg_index[4][4]//debug seven_seg
    
  ) {
  //regfile address
  const X_TEMP = 5hE;
  const Y_TEMP = 5hD;
  const RANDOM = 5h15;
  const X_POS = 5h8;
  const Y_POS = 5h9;
  const LEVEL = 5hF;
  const MOVE = 5hA;
  const ORI = 5h14;
  const TEMP1 = 5hB;
  const TEMP2 = 5hC;
  const TEMP3 = 5h10;
  const TEMP4 = 5h11;
  const TEMP5 = 5h12;
  const TEMP6 = 5h13;
  
  //for debug
  //counter slowclock(#SIZE(1),#DIV(24),.clk(clk),.rst(rst));
  //fsm ctrl(.clk(slowclock.value),.rst(rst))={
  
  fsm ctrl(.clk(clk),.rst(rst))={
    START, //wait for start button
    GENERATE_MAP,GENERATE_MAP_ROW1,GENERATE_MAP_ROW2,GENERATE_MAP_ROW3,GENERATE_MAP_ROW4,
    GENERATE_MAP_ROW5,GENERATE_MAP_ROW6,GENERATE_MAP_ROW7,GENERATE_MAP_ROW8, //generate map -> idle
    IDLE,//wait to receive input
    CHECKUPBORDER,CHECKUPBORDER_CMP,GOUP,CHECKDOWNBORDER,CHECKDOWNBORDER_CMP,GODOWN, // check border
    CHECKLEFTBORDER,CHECKLEFTBORDER_CMP,GOLEFT,CHECKRIGHTBORDER,CHECKRIGHTBORDER_CMP,GORIGHT,
    STAY_AT_X,STAY_AT_Y,// store original unchanged x/y to temp register
    CHECK_GOAL_X, CHECK_GOAL_Y,CHECK_GOAL_XY,CHECK_GOAL_XY_MOVE, //check whether reached goal
    CHECK_COLL,CHECK_COLL_INDEX,CHECK_COLL_CMP, //check collision with wall
    UPDATE_XPOS,UPDATE_YPOS,//update x and y position of pandan
    CHECK_MOVE,CHECK_MOVE_CMP,ADD_MOVE_TEMP,ADD_MOVE,RESET_MOVE, //check whether panda moved 5 times
    CHECK_ORIENTATION,CHECK_ORIENTATION_CMP,ADD_ORIENTATION_TEMP,RESET_ORIENTATION,ADD_ORIENTATION, // change orientation if 5 times
    CHECK_WIN,CHECK_WIN_ADD,CHECK_WIN_CMP,//check win condition
    GAMEOVER,RESET_LEVEL};
  
  
  always {
    
    //connection
    alufn = 6b0; //add
    we = b0;
    asel = 4b0;//ra
    bsel = 4b0; //rb
    wdsel = 3b0;//alu
    ra = TEMP6; //temp
    rb = TEMP6;
    rc = TEMP6;
    level_out = 16b0;
    seg_index = {4h0,4h0,4h0,4h0};
    clear = 0;
    move_num_out = 0;
    orientation_out = 0;
    
    
    //fms ctrl
    case(ctrl.q){
      
      ctrl.START:
        seg_index = {4h0,4h0,4h0,4h1};
        if (start == b1){
          ctrl.d = ctrl.GENERATE_MAP;}
        else{
          ctrl.d = ctrl.START;}
      
      //////////////////////////////
      ctrl.GENERATE_MAP:
        seg_index = {4h0,4h0,4h0,4h2};
        we = b1;
        //load first line
        ctrl.d = ctrl.GENERATE_MAP_ROW1;
      
      ctrl.GENERATE_MAP_ROW1:
        seg_index = {4h0,4h0,4h0,4h3};
        rc = 5h0; // row1
        we = b1;
        ctrl.d = ctrl.GENERATE_MAP_ROW2;
      
      ctrl.GENERATE_MAP_ROW2:
        seg_index = {4h0,4h0,4h0,4h4};
        we = b1;
        rc = 5h1; // row2
        ctrl.d = ctrl.GENERATE_MAP_ROW3;
      
      ctrl.GENERATE_MAP_ROW3:
        seg_index = {4h0,4h0,4h0,4h5};
        we = b1;
        rc = 5h2; // row3
        ctrl.d = ctrl.GENERATE_MAP_ROW4;
      ctrl.GENERATE_MAP_ROW4:
        seg_index = {4h0,4h0,4h0,4h6};
        we = b1;
        rc = 5h3; // row4
        ctrl.d = ctrl.GENERATE_MAP_ROW5;
      ctrl.GENERATE_MAP_ROW5:
        seg_index = {4h0,4h0,4h0,4h7};
        we = b1;
        rc = 5h4; // row5
        ctrl.d = ctrl.GENERATE_MAP_ROW6;
      ctrl.GENERATE_MAP_ROW6:
        seg_index = {4h0,4h0,4h0,4h8};
        we = b1;
        rc = 5h5; // row6
        ctrl.d = ctrl.GENERATE_MAP_ROW7;
      ctrl.GENERATE_MAP_ROW7:
        seg_index = {4h0,4h0,4h0,4h9};
        we = b1;
        rc = 5h6; // row7
        ctrl.d = ctrl.GENERATE_MAP_ROW8;
      ctrl.GENERATE_MAP_ROW8:
        seg_index = {4h0,4h0,4h1,4h0};
        we = b1;
        rc = 5h7; // row8
        ctrl.d = ctrl.IDLE;
      
      //////////////////////////////
      ctrl.IDLE:
        seg_index = {4h8,4h8,4h8,4h8};
        if (direction[0]==b1 || direction[1]==b1 || direction[2]==b1 || direction[3]==b1){
          //check direction and current x y border
          case(direction){
            b1000:
              ctrl.d = ctrl.CHECKUPBORDER;
            //Y_TEMP.d = Y_TEMP.q + 1;//up
            //X_TEMP.d = X_POS.q
            //if (y==b111){ctrl.d = ctrl.IDLE;}
            b0100:
              ctrl.d = ctrl.CHECKDOWNBORDER;
            // Y_TEMP.d = Y_TEMP.q - 1;//down
            //X_TEMP.d = X_POS.q
            //if (y==b0){ctrl.d = ctrl.IDLE;}
            b0010:
              ctrl.d = ctrl.CHECKLEFTBORDER;
            //X_TEMP.d = X_TEMP.q - 1;//LEFT
            //Y_TEMP.d = Y_POS.q
            //if (x==b0){ctrl.d = ctrl.IDLE;}
            b0001:
              ctrl.d = ctrl.CHECKRIGHTBORDER;
            // X_TEMP.d = X_TEMP.q + 1;//RIGHT
            //Y_TEMP.d = Y_POS.q
            //if (x==b111){ctrl.d = ctrl.IDLE;}
          }
          
        }
        else if (start == 0){
          ctrl.d = ctrl.GAMEOVER;
        }
        else{ctrl.d = ctrl.IDLE;}
      
      //////////////////////////////
      ctrl.CHECKUPBORDER:
        seg_index = {4h0,4h0,4h1,4h1};
        //if (y==b111){ctrl.d = ctrl.IDLE;}
        ra = Y_POS; // Y_POS
        rb = RANDOM; // RANDOM num
        rc = TEMP1; // result 1/0
        asel = 4b0; // choose ra data
        bsel = 4b0111; // choose 7
        alufn = 6b110011; // equal
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.CHECKUPBORDER_CMP;
      ///
      ctrl.CHECKUPBORDER_CMP:
        //if TEMP1 == 1, when add 0, res = 1, z=0, means equal, means idle
        seg_index = {4h0,4h0,4h1,4h2};
        ra = TEMP1; // compare result
        rb = RANDOM; // RANDOM num
        rc = TEMP2; // random
        asel = 4b0; // choose ra data
        bsel = 4b1010; // choose 0
        alufn = 6b0; // add
        we = b0; // write not enable
        wdsel = 3b0; //take alu output
        
        if (z==0){
          ctrl.d = ctrl.IDLE;}
        else{ctrl.d = ctrl.GOUP;}
      ///
      ctrl.GOUP:
        seg_index = {4h0,4h0,4h1,4h3};
        //Y_TEMP.d = Y_TEMP.q + 1;
        ra = Y_POS; // Y_POS reg
        rb = RANDOM; // RANDOM num
        rc = Y_TEMP; // y temp
        asel = 4b0; // choose ra data
        bsel = 4b1; // choose 1
        alufn = 6b0; // add
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.STAY_AT_X;
      
      //////////////////////////////
      
      ctrl.CHECKDOWNBORDER:
        seg_index = {4h0,4h0,4h1,4h4};
        //if (y==b0){ctrl.d = ctrl.IDLE;}
        ra = Y_POS; // Y_POS
        rb = RANDOM; // RANDOM num
        rc = TEMP1; // result 1/0
        asel = 4b0; // choose ra data
        bsel = 4b1010; // choose 0
        alufn = 6b110011; // equal
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.CHECKDOWNBORDER_CMP;
      ///
      ctrl.CHECKDOWNBORDER_CMP:
        //if TEMP1 == 1, when add 0, res = 1, z=0, means equal, means idle
        seg_index = {4h0,4h0,4h1,4h5};
        ra = TEMP1; // compare result
        rb = RANDOM; // RANDOM num
        rc = TEMP2; // random
        asel = 4b0; // choose ra data
        bsel = 4b1010; // choose 0
        alufn = 6b0; // add
        we = b0; // write not enable
        wdsel = 3b0; //take alu output
        
        if (z==0){
          ctrl.d = ctrl.IDLE;}
        else{ctrl.d = ctrl.GODOWN;}
      ///
      ctrl.GODOWN:
        seg_index = {4h0,4h0,4h1,4h6};
        //Y_TEMP.d = Y_TEMP.q - 1;
        ra = Y_POS; // Y_POS reg
        rb = RANDOM; // RANDOM num
        rc = Y_TEMP; // y temp
        asel = 4b0; // choose ra data
        bsel = 4b1; // choose 1
        alufn = 6b1; // subc
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.STAY_AT_X;
      
      //////////////////////////////
      ctrl.CHECKLEFTBORDER:
        seg_index = {4h0,4h0,4h1,4h7};
        //if (x==b0){ctrl.d = ctrl.IDLE;}
        ra = X_POS; // x POS reg
        rb = RANDOM; // RANDOM num
        rc = TEMP1; // result 1/0
        asel = 4b0; // choose ra data
        bsel = 4b1010; // choose 0
        alufn = 6b110011; // equal
        we = b1; // write not enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.CHECKLEFTBORDER_CMP;
      ///
      ctrl.CHECKLEFTBORDER_CMP:
        //if TEMP1 == 1, when add 0, res = 1, z=0, means equal, means idle
        seg_index = {4h0,4h0,4h1,4h8};
        ra = TEMP1; // compare result
        rb = RANDOM; // RANDOM num
        rc = TEMP2; // random
        asel = 4b0; // choose ra data
        bsel = 4b1010; // choose 0
        alufn = 6b0; // add
        we = b0; // write not enable
        wdsel = 3b0; //take alu output
        if (z==0){
          ctrl.d = ctrl.IDLE;}
        else{ctrl.d = ctrl.GOLEFT;}
      ///
      ctrl.GOLEFT:
        seg_index = {4h0,4h0,4h1,4h9};
        //X_TEMP.d = X_TEMP.q - 1;//LEFT
        ra = X_POS; // x POS reg
        rb = RANDOM; // RANDOM num
        rc = X_TEMP; // x temp
        asel = 4b0; // choose ra data
        bsel = 4b1; // choose 1
        alufn = 6b1; // subc
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.STAY_AT_Y;
      
      //////////////////////////////
      ctrl.CHECKRIGHTBORDER:
        seg_index = {4h0,4h0,4h2,4h0};
        //if (x==b111){ctrl.d = ctrl.IDLE;}
        ra = X_POS; // x POS reg
        rb = RANDOM; // RANDOM num
        rc = TEMP1; // result 1/0
        asel = 4b0; // choose ra data
        bsel = 4b0111; // choose 7
        alufn = 6b110011; // equal
        we = b1; // write not enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.CHECKRIGHTBORDER_CMP;
      ///
      ctrl.CHECKRIGHTBORDER_CMP:
        //if TEMP1 == 1, when add 0, res = 1, z=0, means equal, means idle
        seg_index = {4h0,4h0,4h2,4h1};
        ra = TEMP1; // compare result
        rb = RANDOM; // RANDOM num
        rc = TEMP2; // random
        asel = 4b0; // choose ra data
        bsel = 4b1010; // choose 0
        alufn = 6b0; // add
        we = b0; // write not enable
        wdsel = 3b0; //take alu output
        if (z==0){
          ctrl.d = ctrl.IDLE;}
        else{ctrl.d = ctrl.GORIGHT;}
      ///
      ctrl.GORIGHT:
        seg_index = {4h0,4h0,4h2,4h2};
        // X_TEMP.d = X_TEMP.q + 1;//RIGHT
        ra = X_POS; // x PSOS reg
        rb = RANDOM; // RANDOM num
        rc = X_TEMP; // x temp
        asel = 4b0; // choose ra data
        bsel = 4b1; // choose 1
        alufn = 6b0; // add
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.STAY_AT_Y;
      
      //////////////////////////////
      ctrl.STAY_AT_X:
        // X_TEMP.d = X_POS.q
        seg_index = {4h4,4h4,4h4,4h4};
        ra = X_POS; // x POS reg
        rb = RANDOM; // RANDOM num
        rc = X_TEMP; // x temp
        asel = 4b0; // choose ra data
        bsel = 4b1010; // choose 0
        alufn = 6b0; // add
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.CHECK_GOAL_X;
      ///
      ctrl.STAY_AT_Y:
        seg_index = {4h3,4h3,4h3,4h3};
        // Y_TEMP.d = Y_POS.q
        ra = Y_POS; // Y POS reg
        rb = RANDOM; // RANDOM num
        rc = Y_TEMP; // Y temp
        asel = 4b0; // choose ra data
        bsel = 4b1010; // choose 0
        alufn = 6b0; // add
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.CHECK_GOAL_X;
        
      //////////////////////////////
      ctrl.CHECK_GOAL_X:
        seg_index = {4h0,4h0,4h2,4h3};
        //if X_TEMP.q == b111: check Y_TEMP
        ra = X_TEMP; // x temp reg
        rb = RANDOM; // RANDOM num
        rc = TEMP2; // result 1/0
        asel = 4b0; // choose ra data
        bsel = 4b0111; // choose 7
        alufn = 6b110011; // equal
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.CHECK_GOAL_Y;
      ///
      ctrl.CHECK_GOAL_Y:
        seg_index = {4h0,4h0,4h2,4h4};
        //if Y_TEMP.q == b111)
        ra = Y_TEMP; // y temp reg
        rb = RANDOM; // RANDOM num
        rc = TEMP1; // result 1/0
        asel = 4b0; // choose ra data
        bsel = 4b0111; // choose 7
        alufn = 6b110011; // equal
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.CHECK_GOAL_XY;
      ///
      ctrl.CHECK_GOAL_XY:
        //if x && y
        seg_index = {4h0,4h0,4h2,4h5};
        ra = TEMP1; // x=7
        rb = TEMP2; // y=7
        rc = TEMP3; // result 1/0
        asel = 4b0; // choose ra data
        bsel = 4b0; // choose rb data
        alufn = 6b011000; // and
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.CHECK_GOAL_XY_MOVE;
      ///
      ctrl.CHECK_GOAL_XY_MOVE:
        //if TEMP3 == 1, when add 0, res = 1, z=0, means x=y=7, means win
        seg_index = {4h0,4h0,4h2,4h6};
        ra = TEMP3; // cpm res
        rb = RANDOM; // random
        rc = RANDOM; // random
        asel = 4b0; // choose ra data
        bsel = 4b1010; // choose 0
        alufn = 6b0; // add
        we = b0; // write not enable
        wdsel = 3b0; //take alu output
        if (z==0){
          ctrl.d = ctrl.CHECK_WIN;} // both x and y == 7
        else{ctrl.d = ctrl.CHECK_COLL;}
      
      //////////////////////////////
      ctrl.CHECK_COLL:
        seg_index = {4h0,4h0,4h2,4h7};
        ra = RANDOM; // random
        rb = X_TEMP; // x_TEMP
        rc = TEMP2; // shifted slicing index
        asel = 4b1; // 1
        bsel = 4b0; // choose rb data
        alufn = 6b100000; // shl
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.CHECK_COLL_INDEX;
        
      ctrl.CHECK_COLL_INDEX:
        seg_index = {4h0,4h0,4h2,4h8};
        ra = y_temp[4:0];// Y_TEMP'S CONTENT
        rb = TEMP2; // shifted one hot
        rc = TEMP5; // and res
        asel = 4b0; // choose ra data
        bsel = 4b0; // choose rb data
        alufn = 6b011000; // and
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.CHECK_COLL_CMP;
        
      ctrl.CHECK_COLL_CMP:
        //if TEMP5 == 1, when add 0, res = 1, z=0, means and=1, means collide -> idle
        seg_index = {4h0,4h0,4h2,4h9};
        ra = TEMP5; // and res
        rb = RANDOM; // random
        rc = RANDOM; // random
        asel = 4b0; // choose ra data
        bsel = 4b1010; // choose 0
        alufn = 6b0; // add
        we = b0; // write not enable
        wdsel = 3b0; //take alu output
        
        if (z==b0){ //AND RES =1
          ctrl.d = ctrl.IDLE;
        }
        else{
          //write position from temp dff
          // x_pos_out = X_TEMP.q;
          // y_pos_out = Y_TEMP.q;
          // ctrl.d = ctrl.IDLE;
          ctrl.d = ctrl.UPDATE_XPOS;
        }
      //////////////////////////////
      ctrl.UPDATE_XPOS:
        seg_index = {4h0,4h0,4h3,4h0};
        // x_pos_out = X_TEMP.q;
        ra = X_TEMP; // x temp
        rb = RANDOM; // ran
        rc = X_POS; // x coor
        asel = 4b0; // choose ra data
        bsel = b1010; // 0
        alufn = 6b0; // add
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.UPDATE_YPOS;
        
      //////////////////////////////
      ctrl.UPDATE_YPOS:
        seg_index = {4h0,4h0,4h3,4h1};
        // y_pos_out = Y_TEMP.q;
        ra = Y_TEMP; // y temp
        rb = RANDOM; // ran
        rc = Y_POS; // y coor
        asel = 4b0; // choose ra data
        bsel = b1010; // 0
        alufn = 6b0; // add
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.CHECK_MOVE;
      
      //////////////////////////////
      ctrl.CHECK_MOVE:
        //update orientation_state
        //if (move_num_in==b101){
        //ctrl.d = ctrl.RESET_MOVE;}
        //else{ctrl.d = ctrl.ADD_MOVE;}
        seg_index = {4h0,4h0,4h3,4h2};
        ra = MOVE; // move_reg
        rb = RANDOM; // random
        rc = TEMP1; // result 1/0
        asel = 4b0; // choose ra data
        bsel = 4b0101; // choose 5
        alufn = 6b110011; // equal
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.CHECK_MOVE_CMP;
      ///
      ctrl.CHECK_MOVE_CMP:
        //if TEMP1 == 1, when add 0, res = 1, z=0, means equal, means idle
        seg_index = {4h0,4h0,4h3,4h3};
        ra = TEMP1; // compare result
        rb = RANDOM; // RANDOM num
        rc = RANDOM; // random
        asel = 4b0; // choose ra data
        bsel = 4b1010; // choose 0
        alufn = 6b0; // add
        we = b0; // write not enable
        wdsel = 3b0; //take alu output
        
        if (z==0){
          ctrl.d = ctrl.RESET_MOVE;}
        else{ctrl.d = ctrl.ADD_MOVE_TEMP;}
      ///
      ctrl.ADD_MOVE_TEMP:
        //add move to move_temp(4)
        seg_index = {4h0,4h0,4h3,4h4};
        ra = MOVE; // move
        rb = RANDOM; // random
        rc = TEMP4; // move move temp
        asel = 4b0; // choose ra data
        bsel = 4b1010; // choose 0
        alufn = 6b0; // add
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.ADD_MOVE;
      ///
      ctrl.ADD_MOVE:
        seg_index = {4h0,4h0,4h3,4h5};
        ra = TEMP4; // MOVE TEMP
        rb = RANDOM; // random
        rc = MOVE; // move reg
        asel = 4b0; // choose ra data
        bsel = 4b1; // choose 1
        alufn = 6b0; // add
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.IDLE;
      
      ////
      ctrl.RESET_MOVE:
        //write in zero
        seg_index = {4h0,4h0,4h3,4h6};
        ra = RANDOM; // random
        rb = RANDOM; // random
        rc = MOVE; // move reg
        asel = 4b1010; // choose 0
        bsel = 4b1010; // choose 0
        alufn = 6b0; // add
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.CHECK_ORIENTATION;
        
      //////////////////////////////
      ctrl.CHECK_ORIENTATION:
        //if(orientation_in==b11){
        //ctrl.d = ctrl.RESET_ORIENTATION;}
        //else{ctrl.d = ctrl.ADD_ORIENTATION;}
        seg_index = {4h0,4h0,4h3,4h7};
        ra = ORI; // move_reg
        rb = RANDOM; // random
        rc = TEMP1; // result 1/0
        asel = 4b0; // choose ra data
        bsel = 4b11; // choose 3
        alufn = 6b110011; // equal
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.CHECK_ORIENTATION_CMP;
      ///
      ctrl.CHECK_ORIENTATION_CMP:
        //if TEMP1 == 1, when add 0, res = 1, z=0, means equal
        seg_index = {4h0,4h0,4h3,4h8};
        ra = TEMP1; // compare result
        rb = RANDOM; // RANDOM num
        rc = RANDOM; // random
        asel = 4b0; // choose ra data
        bsel = 4b1010; // choose 0
        alufn = 6b0; // add
        we = b0; // write not enable
        wdsel = 3b0; //take alu output
        
        if (z==0){
          ctrl.d = ctrl.RESET_ORIENTATION;}
        else{ctrl.d = ctrl.ADD_ORIENTATION_TEMP;}
      
      ///
      ctrl.RESET_ORIENTATION:
        //write in zero
        seg_index = {4h0,4h0,4h3,4h9};
        ra = RANDOM; // random
        rb = RANDOM; // random
        rc = ORI; // move reg
        asel = 4b1010; // choose 0
        bsel = 4b1010; // choose 0
        alufn = 6b0; // add
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.IDLE;
      
      ///
      ctrl.ADD_ORIENTATION_TEMP:
        //add orien to orien_temp(4)
        seg_index = {4h0,4h0,4h4,4h0};
        ra = ORI; // ori
        rb = RANDOM; // random
        rc = TEMP4; // ori temp
        asel = 4b0; // choose ra data
        bsel = 4b1010; // choose 0
        alufn = 6b0; // add
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.ADD_ORIENTATION;
      
      ///
      ctrl.ADD_ORIENTATION:
        seg_index = {4h0,4h0,4h4,4h1};
        ra = TEMP4; // random
        rb = RANDOM; // random
        rc = ORI; // move reg
        asel = 4b0; // choose ra data
        bsel = 4b1; // choose 1
        alufn = 6b0; // add
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.IDLE;
      
      //////////////////////////////
      ctrl.CHECK_WIN:
        seg_index = {4h0,4h0,4h4,4h2};
        //if (level_in < b10){
        //level_out = level_in + b1;
        //clear = 1;
        //ctrl.d = ctrl.START;}
        //else {ctrl.d = ctrl.GAMEOVER;}
        
        ra = LEVEL; // level reg
        rb = RANDOM; // random
        rc = TEMP1; // result 1/0
        asel = 4b0; // choose ra data
        bsel = 4b10; // choose 2
        alufn = 6b110101; // cmplt
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        ctrl.d = ctrl.CHECK_WIN_CMP;
      
      ///
      ctrl.CHECK_WIN_CMP:
        //if TEMP1 == 1, when add 0, res = 1, z=0, means less than
        seg_index = {4h0,4h0,4h4,4h3};
        ra = TEMP1; // compare result
        rb = RANDOM; // RANDOM num
        rc = RANDOM; // random
        asel = 4b0; // choose ra data
        bsel = 4b1010; // choose 0
        alufn = 6b0; // add
        we = b0; // write not enable
        wdsel = 3b0; //take alu output
        
        if (z==0){
          ctrl.d = ctrl.CHECK_WIN_ADD;}
        else{ctrl.d = ctrl.GAMEOVER;}
      
      ///
      ctrl.CHECK_WIN_ADD:
        seg_index = {4h0,4h0,4h4,4h4};
        ra = LEVEL; // random
        rb = RANDOM; // random
        rc = LEVEL; // move reg
        asel = 4b0; // choose ra data
        bsel = 4b1; // choose 1
        alufn = 6b0; // add
        we = b1; // write enable
        wdsel = 3b0; //take alu output
        clear = 1;
        ctrl.d = ctrl.START;
        
      //////////////////////////////
      ctrl.GAMEOVER:
        seg_index = {4h9,4h9,4h9,4h9};
        if (reset == b1){
          ctrl.d = ctrl.RESET_LEVEL;}
        else{
          //show 7-seg msg
          ctrl.d = ctrl.GAMEOVER;}
          
      //////////////////////////////
      ctrl.RESET_LEVEL:
        seg_index = {4h6,4h6,4h6,4h6};
        level_out = 16b0;
        ctrl.d = ctrl.START;
      
    }
  }
}