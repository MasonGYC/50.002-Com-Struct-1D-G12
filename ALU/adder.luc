module adder (
    input a[16],             // 16-bit signed input
    input b[16],             // 16-bit signed input
    input alufn[6],          // 6-bit ALUFN OPCODE
    output out[16],          // 16-bit output
    output z[1],             // 1-bit output for zero condition
    output v[1],             // 1-bit output for overflow condition
    output n[1]              // 1-bit output for MSB of output (positive/negative)
  ) {
  
  sig s[16];                 // intermediary connector
  
  always {                   // behaviour of machine
    s = 16b0;                // setting s to have value of value of 2 but with 16-bits 

    
    case(alufn[0]){          // multiplexer
      0: s = a+b;            // ADD (S = A+B); OPCODE = 000000
      1: s = a-b;            // SUB [S = A+(-B)] ; OPCODE = 000001
      default: s = 16b0;
  }
    n = s[15];                                                                            // checking for MSB (positive/negative)
    v = (a[15] & (b[15] ^ alufn[0]) & !s[15]) | (!a[15] & !(b[15] ^ alufn[0]) & s[15]);   // computing overflow
    z = (s == 16b0);                                                                      // checking for zero condition
    out = s;                                                                              // output as s
  }
}