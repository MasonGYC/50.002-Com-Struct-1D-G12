module sixteen_bit_division (
    input clk, // 100MHz clock, sequential circuit
    input rst,  
    input a[16], //divident
    input b[16], //divisor
    output q[16], //quotient
    output r[16], //remainder
    output ex //divided_by_0
    
  ) {

  dff ra[16](#INIT(0), .clk(clk), .rst(rst)); //divident
  dff rb[16](#INIT(0), .clk(clk), .rst(rst));//divisor 
  dff r_quo[16](#INIT(0), .clk(clk), .rst(rst)); //quotient counter
  dff r_rem[16](#INIT(0), .clk(clk), .rst(rst)); //remainder counter
  dff r_ex[1](#INIT(0), .clk(clk), .rst(rst)); // exception if divided by 0

  always {
      rb.d = b;
      ex = r_ex.q;    
      q = r_quo.q;
      r = r_rem.q;

    //init ra value
    if (ra.q == 16b0 & r_quo.q == 16b0){
        ra.d = a;
      }

    //exception
    if (b == 16b0){
      r_ex.d = 1;
    }
    
    //detect positive/negative and do different operation
    case (b[15]){
      0:
        case(a[15]){
            0:// P/P
             if (ra.q<rb.q){
                r_rem.d = ra.q; //remainder 
                q = r_quo.q; //quotient
                }
             else{
                ra.d=ra.q-rb.q;
                r_quo.d = r_quo.q +1;
                }
            1:// N/P
            if ((~ra.q)<rb.q){
                r_rem.d = ra.q; //remainder 
                q =r_quo.q; //quotient
                }
             else{
                ra.d=ra.q+rb.q;
                r_quo.d = r_quo.q - 1;
                }
            
        }
      1:
        case(a[15]){
            0:// P/N
             if (ra.q<(~rb.q)){
                r_rem.d = ra.q; //remainder 
                q =r_quo.q; //quotient
                }
             else{
                ra.d=ra.q+rb.q;
                r_quo.d = r_quo.q -1;
                }
            1:// N/N
            if (ra.q>rb.q){
                r_rem.d = ra.q; //remainder 
                q =r_quo.q; //quotient
                }
             else{
                ra.d=ra.q-rb.q;
                r_quo.d = r_quo.q +1;
                }
            
        }
      
        
    }

  }

